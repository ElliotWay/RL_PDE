import numpy as np

from gym.spaces import Box


# TODO adjust so softmax works over multiple dimensions when we move up from 1D envs.
class SoftmaxBox(Box):
    """
    The space of possible outputs from a softmax function on a set of a values.
    Not really a "box" anymore; I think it's a simplex.
    The key difference between this and a normal Box is the sample function, which
    is adjusted so that its outputs are appropriate for a softmax function.
    This adjustment is only performed along the last dimension of the space.
    """

    def __init___(self, low, high, shape=None, dtype=np.float32):
        assert (low == 0.0)
        assert (high == 1.0)
        super(SoftmaxBox, self).__init__(low, high, shape, dtype)

    def sample(self):
        """
        Generates a single random sample inside the space.

        However, in this unusual space, we constrain weights along the last
        dimension to look like the output of a sotfmax function.

        The sample is generated by sampling from a Gaussian for each point,
        then apply a softmax function to that set of points.
        """
        sample = self.np_random.normal(size=self.shape)

        exp_sample = np.exp(sample)

        # Need to recover last dimension reduced by sum to broadcast correctly.
        return exp_sample / np.expand_dims(np.sum(exp_sample, axis=-1), axis=-1)
